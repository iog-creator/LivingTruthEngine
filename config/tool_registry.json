{
  "version": "1.0.0",
  "last_updated": "2025-08-02",
  "total_tools": 40,
  "servers": {
    "living_truth_fastmcp_server": {
      "description": "Living Truth Engine FastMCP Server for survivor testimony analysis",
      "tools": [
        {
          "name": "query_langflow",
          "description": "Query the Langflow workflow for survivor testimony analysis",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "query_langflow",
          "params_schema": {
            "query": {
              "type": "string",
              "required": true
            },
            "output_type": {
              "type": "string",
              "default": "summary"
            },
            "anonymize": {
              "type": "boolean",
              "default": false
            }
          }
        },
        {
          "name": "query_flowise",
          "description": "Query the Flowise chatflow for pattern recognition and data analysis",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "query_flowise",
          "params_schema": {
            "query": {
              "type": "string",
              "required": true
            },
            "anonymize": {
              "type": "boolean",
              "default": false
            },
            "output_type": {
              "type": "string",
              "default": "summary"
            }
          }
        },
        {
          "name": "get_status",
          "description": "Get Living Truth Engine system status and health",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "get_status",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "list_sources",
          "description": "List all available sources in the system",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "list_sources",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "analyze_transcript",
          "description": "Analyze a specific transcript or data file for patterns",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "analyze_transcript",
          "params_schema": {
            "transcript_name": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "generate_viz",
          "description": "Generate visualizations and pattern maps",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "generate_viz",
          "params_schema": {
            "viz_type": {
              "type": "string",
              "default": "network"
            }
          }
        },
        {
          "name": "fix_flow",
          "description": "Request updates to the Langflow workflow",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "fix_flow",
          "params_schema": {
            "fix_request": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "get_current_time",
          "description": "Get the current time as a test tool",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "get_current_time",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "batch_system_operations",
          "description": "Batch system operations: get status, list sources, and check health",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "batch_system_operations",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "batch_analysis_operations",
          "description": "Batch analysis operations: query Langflow, analyze transcript, and generate visualization",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "batch_analysis_operations",
          "params_schema": {
            "query": {
              "type": "string",
              "required": true
            },
            "transcript_name": {
              "type": "string",
              "default": null
            },
            "viz_type": {
              "type": "string",
              "default": "network"
            }
          }
        },
        {
          "name": "get_project_info",
          "description": "Get comprehensive project information and available tools",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "get_project_info",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "get_lm_studio_models",
          "description": "Get list of available models in LM Studio",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "get_lm_studio_models",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "generate_lm_studio_text",
          "description": "Generate text using LM Studio models",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "generate_lm_studio_text",
          "params_schema": {
            "prompt": {
              "type": "string",
              "required": true
            },
            "model": {
              "type": "string",
              "default": ""
            },
            "max_tokens": {
              "type": "integer",
              "default": 1000
            },
            "temperature": {
              "type": "number",
              "default": 0.7
            },
            "system_prompt": {
              "type": "string",
              "default": ""
            }
          }
        },
        {
          "name": "test_lm_studio_connection",
          "description": "Test connection to LM Studio",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "test_lm_studio_connection",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "get_lm_studio_status",
          "description": "Get LM Studio server status and health",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "get_lm_studio_status",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "generate_audio",
          "description": "Generate audio from text using TTS model",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "generate_audio",
          "params_schema": {
            "text": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "auto_detect_and_add_tools",
          "description": "Automatically detect development needs and add tools",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "auto_detect_and_add_tools",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "auto_update_all_documentation",
          "description": "Automatically update all project documentation",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "auto_update_all_documentation",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "auto_update_cursor_rules",
          "description": "Automatically update cursor rules based on current patterns",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "auto_update_cursor_rules",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "auto_validate_system_state",
          "description": "Automatically validate and report system state",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "auto_validate_system_state",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "comprehensive_health_check",
          "description": "Perform comprehensive health check of all system components",
          "server": "living_truth_fastmcp_server",
          "module": "src.mcp_servers.living_truth_fastmcp_server",
          "function": "comprehensive_health_check",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        }
      ]
    },
    "langflow_mcp_server": {
      "description": "Langflow MCP Server for workflow integration",
      "tools": [
        {
          "name": "query_langflow",
          "description": "Query the Langflow workflow for survivor testimony analysis",
          "server": "langflow_mcp_server",
          "module": "src.mcp_servers.langflow_mcp_server",
          "function": "query_langflow",
          "params_schema": {
            "query": {
              "type": "string",
              "required": true
            },
            "anonymize": {
              "type": "boolean",
              "default": false
            },
            "output_type": {
              "type": "string",
              "default": "summary"
            }
          }
        },
        {
          "name": "create_langflow",
          "description": "Create or update a Langflow workflow",
          "server": "langflow_mcp_server",
          "module": "src.mcp_servers.langflow_mcp_server",
          "function": "create_langflow",
          "params_schema": {
            "flow_config": {
              "type": "object",
              "required": true
            },
            "flow_id": {
              "type": "string",
              "default": null
            }
          }
        },
        {
          "name": "export_flow_to_file",
          "description": "Export flow to JSON file for editing",
          "server": "langflow_mcp_server",
          "module": "src.mcp_servers.langflow_mcp_server",
          "function": "export_flow_to_file",
          "params_schema": {
            "flow_id": {
              "type": "string",
              "required": true
            },
            "file_path": {
              "type": "string",
              "default": "data/flows/exported_flow.json"
            }
          }
        },
        {
          "name": "load_flow_from_file",
          "description": "Load flow JSON from file for configuration",
          "server": "langflow_mcp_server",
          "module": "src.mcp_servers.langflow_mcp_server",
          "function": "load_flow_from_file",
          "params_schema": {
            "file_path": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "get_langflow_status",
          "description": "Get Langflow system status and connection information",
          "server": "langflow_mcp_server",
          "module": "src.mcp_servers.langflow_mcp_server",
          "function": "get_langflow_status",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        }
      ]
    },
    "github_mcp_server": {
      "description": "GitHub MCP Server for repository management",
      "tools": [
        {
          "name": "list_repositories",
          "description": "List GitHub repositories for the configured user",
          "server": "github_mcp_server",
          "module": "src.mcp_servers.github_mcp_server",
          "function": "list_repositories",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "create_issue",
          "description": "Create a GitHub issue in the specified repository",
          "server": "github_mcp_server",
          "module": "src.mcp_servers.github_mcp_server",
          "function": "create_issue",
          "params_schema": {
            "repo": {
              "type": "string",
              "required": true
            },
            "title": {
              "type": "string",
              "required": true
            },
            "body": {
              "type": "string",
              "required": true
            },
            "labels": {
              "type": "string",
              "default": ""
            }
          }
        }
      ]
    },
    "postgresql_mcp_server": {
      "description": "PostgreSQL MCP Server for database operations",
      "tools": [
        {
          "name": "test_connection",
          "description": "Test PostgreSQL database connection",
          "server": "postgresql_mcp_server",
          "module": "src.mcp_servers.postgresql_mcp_server",
          "function": "test_connection",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "list_tables",
          "description": "List all tables in the database",
          "server": "postgresql_mcp_server",
          "module": "src.mcp_servers.postgresql_mcp_server",
          "function": "list_tables",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        },
        {
          "name": "execute_query",
          "description": "Execute a SELECT query on the database",
          "server": "postgresql_mcp_server",
          "module": "src.mcp_servers.postgresql_mcp_server",
          "function": "execute_query",
          "params_schema": {
            "query": {
              "type": "string",
              "required": true
            },
            "limit": {
              "type": "integer",
              "default": 10
            }
          }
        }
      ]
    },
    "huggingface_mcp_server": {
      "description": "Hugging Face MCP Server for model access",
      "tools": [
        {
          "name": "search_models",
          "description": "Search for models on Hugging Face Hub",
          "server": "huggingface_mcp_server",
          "module": "src.mcp_servers.huggingface_mcp_server",
          "function": "search_models",
          "params_schema": {
            "query": {
              "type": "string",
              "required": true
            },
            "limit": {
              "type": "integer",
              "default": 10
            }
          }
        },
        {
          "name": "get_model_info",
          "description": "Get detailed information about a specific Hugging Face model",
          "server": "huggingface_mcp_server",
          "module": "src.mcp_servers.huggingface_mcp_server",
          "function": "get_model_info",
          "params_schema": {
            "model_id": {
              "type": "string",
              "required": true
            }
          }
        }
      ]
    },
    "devdocs_mcp_server": {
      "description": "DevDocs MCP Server for document retrieval",
      "tools": [
        {
          "name": "crawl_docs",
          "description": "Crawl documentation from DevDocs",
          "server": "devdocs_mcp_server",
          "module": "src.mcp_servers.devdocs_mcp_server",
          "function": "crawl_docs",
          "params_schema": {
            "depth": {
              "type": "integer",
              "default": 3
            }
          }
        },
        {
          "name": "retrieve_docs",
          "description": "Retrieve documents from DevDocs",
          "server": "devdocs_mcp_server",
          "module": "src.mcp_servers.devdocs_mcp_server",
          "function": "retrieve_docs",
          "params_schema": {
            "query": {
              "type": "string",
              "required": true
            }
          }
        }
      ]
    },
    "rulego_mcp_server": {
      "description": "Rulego MCP Server for workflow orchestration",
      "tools": [
        {
          "name": "query_rulego_chain",
          "description": "Query a Rulego workflow chain",
          "server": "rulego_mcp_server",
          "module": "src.mcp_servers.rulego_mcp_server",
          "function": "query_rulego_chain",
          "params_schema": {
            "query": {
              "type": "string",
              "required": true
            },
            "chain_name": {
              "type": "string",
              "default": "default"
            }
          }
        },
        {
          "name": "list_rulego_chains",
          "description": "List available Rulego workflow chains",
          "server": "rulego_mcp_server",
          "module": "src.mcp_servers.rulego_mcp_server",
          "function": "list_rulego_chains",
          "params_schema": {
            "random_string": {
              "type": "string",
              "required": true
            }
          }
        }
      ]
    },
    "mcp_solver_server": {
      "description": "MCP Solver Server for constraint solving",
      "tools": [
        {
          "name": "solve_constraint",
          "description": "Solve a constraint using SAT/SMT solver",
          "server": "mcp_solver_server",
          "module": "src.mcp_servers.mcp_solver_server",
          "function": "solve_constraint",
          "params_schema": {
            "constraint": {
              "type": "string",
              "required": true
            },
            "variables": {
              "type": "string",
              "default": "{}"
            }
          }
        },
        {
          "name": "route_llm",
          "description": "Route query to appropriate LLM model",
          "server": "mcp_solver_server",
          "module": "src.mcp_servers.mcp_solver_server",
          "function": "route_llm",
          "params_schema": {
            "query": {
              "type": "string",
              "required": true
            },
            "models": {
              "type": "string",
              "default": "[]"
            }
          }
        }
      ]
    },
    "test_server": {
      "tools": [
        {
          "name": "test_tool",
          "description": "Test tool",
          "server": "test_server",
          "module": "test.module",
          "function": "test_function",
          "params_schema": {
            "param1": {
              "type": "string"
            }
          }
        }
      ]
    }
  }
}