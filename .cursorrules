# Living Truth Engine - Flowise-Based NotebookLM Clone Rules
# This file defines how AI should behave across the entire project

## Project Overview
- **Project Name**: Living Truth Engine (NotebookLM Clone)
- **Type**: Flowise-orchestrated AI system for Biblical forensic analysis and survivor testimony corroboration
- **Architecture**: Flowise graph with LangChain retrieval/chains, Qwen3-0.6B embedder/reranker/LLM, PGVector store, Plotly/Dash visualizations
   - **Environment**: Linux (Ubuntu 6.14.0-24-generic), Python venv: living_venv
- **Key Features**: Document ingestion (text, PDF, YouTube, audio), hybrid retrieval, anonymization toggle, structured outputs (summaries, study guides, timelines, audio overviews), 3D visualizations/dashboard

## Core Development Principles

   ### 1. Environment Management
   - ALWAYS use the canonical `living_venv` Python virtual environment
   - Activate with: `source living_venv/bin/activate`
- Verify environment before any Python operations
- Use environment variables from `.env` files or Flowise config (`living_truth_config.json`), never hardcode values
- Check Flowise running at `http://localhost:3000` before graph operations

### 2. File Management
- ALWAYS check for existing files using `file_search()` and `grep_search()` before creating new ones
- Update existing files instead of creating duplicates
- Preserve original information by commenting out rather than deleting
- Use `sources/` for ingested documents, `visualizations/` for outputs

### 3. MCP Server Integration
- ALWAYS use MCP server (`flowise_mcp_server.py`) for operations: `mcp_flowise-mcp-server_*`
- Use MCP for query execution, status checks, and graph fixes
- Never bypass MCP for operationsâ€”use it to interact with Flowise graph

### 4. Database Configuration
- **Primary Database**: PostgreSQL on port 5432 (living_truth_engine)
- Use environment variables for all connections
- Always verify database connectivity before operations
- Use PGVector for embeddings

### 5. Model Configuration
- **Primary Device**: CPU (RTX 5070 compatibility)
- **LM Studio**: Inference server on localhost:1234
- **Embedding Model**: text-embedding-qwen3-embedding-0.6b (1024 dim)
- **Reranker Model**: qwen.qwen3-reranker-0.6b
- **LLM Model**: qwen/qwen3-8b
- Always verify model availability before AI operations

### 6. Code Quality Standards
- Write comprehensive tests for all new functionality
- Use type hints and proper error handling
- Follow PEP 8 style guidelines
- Document all functions and classes
- Use meaningful variable and function names
- Focus on Flowise custom nodes (Python/JS-like code)

### 7. Project Structure
- Maintain clear separation of concerns
- Use modular architecture in Flowise graph
- Keep configuration in `living_truth_config.json` and .env
- Log all operations for debugging

### 8. Terminal Operations
- Always show what's happening for full auditability
- Use technical but readable output
- Avoid opening new cursor sessions with '-c'
- Reuse existing terminal sessions when possible

### 9. Documentation
- Update canonical documentation first (`.cursor/` folder)
- Maintain consistency across all documents
- Use non-technical language for user-facing content
- Keep documentation in sync with Flowise graph changes

### 10. Compliance and Security
- Run compliance audits before and after operations
- Use environment-driven configuration
- Never expose sensitive information in code
- Follow security best practices (e.g., anonymization toggle)
- Ensure 100% privacy for survivor testimonies

## AI Behavior Rules

### When Writing Code or Editing Graph
1. Check existing implementations or Flowise nodes first
2. Use canonical environment
3. Follow established patterns in `living_truth_full_flow.json`
4. Include proper error handling in custom nodes
5. Write tests for new functionality
6. Document as you go

### When Making Changes
1. Verify the current state (use MCP `get_status`)
2. Make incremental changes in Flowise UI
3. Test each change (run flow in Flowise)
4. Update documentation
5. Run compliance checks via MCP

### When Troubleshooting
1. Understand the root cause (use LangSmith traces)
2. Check environment configuration
3. Verify dependencies
4. Use MCP server for diagnostics
5. Document as you go

## Project-Specific Knowledge

### Database Schema
- living_truth_engine on port 5432 (PostgreSQL with PGVector)
- User: postgres
- Host: localhost

### API Endpoints
- Flowise API: http://localhost:3000 (for MCP)
- Dashboard: http://localhost:8050 (from visualizer)
- LM Studio: http://localhost:1234

### Model Configuration
- Embedder/Reranker: Qwen3-0.6B
- LLM: Qwen3-8B
- TTS: Piper (en_US-lessac-medium)

### Flowise Graph
- Import `living_truth_full_flow.json`
- Use MCP to query/fix graph

## Error Prevention
- Always verify environment before operations
- Check for existing nodes in Flowise before adding
- Use MCP server for compliance checks
- Maintain consistent configuration across services
- Document all changes and decisions

## Success Metrics
- 100% environment consistency
- 100% node existence checks
- 100% MCP server usage
- 100% documentation updates
- 100% compliance with rules 