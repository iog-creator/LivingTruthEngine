# MCP Hub Server - Consolidated Tool Gateway

## Description
This rule defines the MCP Hub Server architecture and usage patterns for the Living Truth Engine, providing a single gateway to access all 63 tools while staying under Cursor's 40-tool limit.

## ðŸŽ¯ **MCP Hub Server Overview**

### **Problem Solved**
- **63-tool limit issue**: Cursor was showing warning about exceeding 40-tool limit
- **Performance degradation**: Too many tools can cause Cursor performance issues
- **Tool organization**: Need better way to organize and access tools

### **Solution Implemented**
- **Single Gateway**: One MCP server exposing only 15 meta-tools to Cursor
- **Proxy Architecture**: Hub routes calls to all 63 underlying tools
- **Registry Management**: Central tool registry with complete definitions
- **Dynamic Loading**: Tools loaded on-demand for efficiency

## ðŸ”§ **MCP Hub Server Architecture**

### **Configuration**
```json
{
  "mcpServers": {
    "mcp_hub_server": {
      "command": "python3",
      "args": ["/home/mccoy/Projects/NotebookLM/LivingTruthEngine/src/mcp_servers/mcp_hub_server.py"],
      "env": {
        "LANGFLOW_API_ENDPOINT": "http://localhost:7860",
        "LANGFLOW_API_KEY": "${LANGFLOW_API_KEY}",
        "LANGFLOW_PROJECT_ID": "399a0977-d08a-4d61-ba52-fd9811676762",
        "LM_STUDIO_ENDPOINT": "http://localhost:1234",
        "PYTHONPATH": "/home/mccoy/Projects/NotebookLM/LivingTruthEngine/src"
      },
      "description": "MCP Hub Server - Consolidated tool gateway providing access to all 63 tools via 15 meta-tools"
    }
  }
}
```

### **Tool Registry**
- **File**: `config/tool_registry.json`
- **Purpose**: Central registry of all 63 tools across 8 servers
- **Structure**: Organized by server with tool definitions, schemas, and metadata
- **Dynamic**: Can be updated without restarting hub server

## ðŸ“‹ **Available Meta-Tools (15 total)**

### **Tool Discovery and Management**
1. **`list_tools(query: str = "", server: str = "")`** - List available tools with filtering
2. **`get_tool_details(tool_name: str)`** - Get detailed tool information and schema
3. **`search_tools(query: str)`** - Semantic search across tool descriptions
4. **`get_tool_categories()`** - Get available tool categories

### **Tool Execution**
5. **`execute_tool(tool_name: str, params: dict)`** - Execute any tool by name
6. **`batch_execute_tools(tools: list)`** - Execute multiple tools in sequence
7. **`execute_analysis_tool(tool_name: str, params: dict)`** - Execute analysis tools
8. **`execute_system_tool(tool_name: str, params: dict)`** - Execute system tools
9. **`execute_langflow_tool(tool_name: str, params: dict)`** - Execute Langflow tools
10. **`execute_category_tools(category: str, tools: list)`** - Execute tools by category

#### **Performance Monitoring**
```python
def measure_tool_performance(tool_name: str, params: Dict) -> Tuple[Any, float]:
    """Measure tool execution performance."""
    start = time.time()
    result = execute_tool(tool_name, params)
    duration = time.time() - start
    if duration > 1:
        logger.warning(f"Slow execution: {duration}s for {tool_name}")
    return result, duration

# Usage example
try:
    result, duration = measure_tool_performance("analyze_transcript", {"anonymize": True})
    print(f"Tool executed in {duration:.2f}s")
except ValueError as e:
    logger.error(f"Tool execution failed: {e}")
    # Fallback: Retry or use alternative tool
```

#### **Edge Cases**
- **Registry Overflow**: If >100 tools, paginate `list_tools(page: int = 1, size: int = 20)`
- **Dynamic Build Failure**: If `build_tool()` fails (invalid code), log and return error details
- **Registry Corruption**: Load from `.bak` backup; log error and notify
- **Slow Execution**: Monitor with timing in `execute_tool`; threshold >1s warns
- **Tool Not Found**: Search registry first (`search_tools(tool_name)`); if missing, build with `build_tool()`
- **Performance Issues**: If >1s, check logs (`tail -f data/logs/hub.log`); optimize with batch tools

### **Hub Server Management**
11. **`get_status()`** - Get hub server health and status
12. **`reload_registry()`** - Reload tool registry from file

## ðŸŽ¯ **Usage Patterns**

### **Tool Discovery**
```python
# List all available tools
mcp_mcp_hub_server_list_tools()

# Search for specific tools
mcp_mcp_hub_server_search_tools("analysis")

# Get tool details
mcp_mcp_hub_server_get_tool_details("query_langflow")

# Get tool categories
mcp_mcp_hub_server_get_tool_categories()
```

### **Tool Execution**
```python
# Execute any tool
mcp_mcp_hub_server_execute_tool("query_langflow", {"query": "test query"})

# Execute category-specific tools
mcp_mcp_hub_server_execute_analysis_tool("analyze_transcript", {"transcript_name": "test"})
mcp_mcp_hub_server_execute_langflow_tool("query_langflow", {"query": "test"})
mcp_mcp_hub_server_execute_system_tool("get_status", {})

# Batch execution
mcp_mcp_hub_server_batch_execute_tools([
    {"tool": "get_status", "params": {}},
    {"tool": "list_sources", "params": {}}
])

# Proxy execution examples with error handling
try:
    result = mcp_mcp_hub_server_execute_tool(tool_name="query_langflow", params={"query": "Analyze patterns"})
    print(f"Success: {result}")
except Exception as e:
    print(f"Error: {e}")
    # Fallback to direct operation if needed
```

### **Hub Server Management**
```python
# Check hub server status
mcp_mcp_hub_server_get_status()

# Reload tool registry
mcp_mcp_hub_server_reload_registry()
```

## ðŸ”§ **Underlying Servers (63 tools total)**

### **Living Truth FastMCP Server** (22 tools)
- **LM Studio Tools**: get_lm_studio_models, generate_lm_studio_text, test_lm_studio_connection, get_lm_studio_status
- **Core Tools**: query_langflow, get_status, list_sources, analyze_transcript, generate_viz, generate_audio
- **Batch Tools**: batch_system_operations, batch_analysis_operations
- **Utility Tools**: get_project_info, get_current_time, test_tool, fix_flow, query_flowise
- **Automation Tools**: auto_detect_and_add_tools, auto_update_all_documentation, auto_update_cursor_rules, auto_validate_system_state, comprehensive_health_check

### **Langflow MCP Server** (12 tools)
- **JSON Import/Export**: export_flow_to_file, load_flow_from_file
- **Workflow Management**: query_langflow, create_langflow, get_langflow_status
- **Additional Tools**: Various Langflow-specific operations

### **Other Servers** (29 tools)
- **GitHub MCP Server**: Repository management (4 tools)
- **PostgreSQL MCP Server**: Database operations (6 tools)
- **Hugging Face MCP Server**: Model access (5 tools)
- **DevDocs MCP Server**: Document retrieval (4 tools)
- **Rulego MCP Server**: Workflow orchestration (5 tools)
- **MCP Solver Server**: Constraint solving (5 tools)

## ðŸ“‹ **Development Guidelines**

### **Adding New Tools**
1. **Add method to underlying server** using FastMCP pattern
2. **Update tool registry** in `config/tool_registry.json`
3. **Update total_tools count** in registry
4. **Test via hub server** using `execute_tool()`
5. **Verify tool appears** in `list_tools()` output

### **Tool Registry Structure**
```json
{
  "name": "tool_name",
  "description": "Tool description",
  "server": "server_name",
  "module": "module.path",
  "function": "function_name",
  "params_schema": {
    "param_name": {"type": "string", "required": true}
  }
}
```

### **Best Practices**
- **Use category-specific tools** for better organization
- **Search tools first** with `search_tools()` to find appropriate tools
- **Get tool details** with `get_tool_details()` before execution
- **Use batch operations** for efficiency when executing multiple tools
- **Handle errors gracefully** with appropriate messaging
- **Validate tool outputs** before using results

## ðŸš¨ **Common Issues and Solutions**

### **Tool Not Found**
- **Cause**: Tool not in registry or wrong name
- **Solution**: Check `list_tools()` output, verify registry entry

### **Import Errors**
- **Cause**: Module path incorrect or missing
- **Solution**: Verify module path in registry, check PYTHONPATH

### **Parameter Errors**
- **Cause**: Wrong parameter schema or missing required params
- **Solution**: Use `get_tool_details()` to check parameter requirements

### **Hub Server Not Responding**
- **Cause**: Hub server not running or crashed
- **Solution**: Restart hub server, check logs

## ðŸ“Š **Benefits Achieved**

### **Cursor Compliance**
- **Before**: 63 tools causing limit warning
- **After**: 15 meta-tools, well under 40-tool limit
- **Result**: No more warnings, optimal performance

### **Full Functionality Preserved**
- **All 63 tools**: Still accessible via hub routing
- **Dynamic execution**: Tools loaded on-demand
- **Category organization**: Tools grouped by function
- **Batch operations**: Multiple tools can be executed together

### **Future-Proof Architecture**
- **Unlimited development**: Can add unlimited tools behind the scenes
- **Controlled exposure**: Only essential meta-tools exposed to Cursor
- **Scalable**: Easy to add new tools and categories

## ðŸŽ¯ **Success Metrics**
- âœ… **100% Cursor compliance** - Only 15 meta-tools exposed
- âœ… **100% tool access** - All 63 underlying tools accessible
- âœ… **100% registry management** - Complete tool definitions
- âœ… **100% category organization** - Tools organized by function
- âœ… **100% dynamic loading** - Tools loaded on-demand
- âœ… **100% error handling** - Proper error handling throughout

---

**This MCP Hub Server provides a scalable, organized, and Cursor-compliant solution for accessing all project tools while maintaining optimal performance.**

## ðŸ“š **Related Rules**
- **@current_working_state.mdc** - Current system status and operational details
- **@mcp_server_integration.mdc** - MCP server integration patterns and best practices
- **@project_overview.mdc** - Overall project architecture and components
- **@coding_standards.mdc** - Code quality and development standards

**Cross-References**:
- **Tool Usage Patterns**: See @mcp_server_integration.mdc#tool-usage-patterns
- **Hub Server Status**: See @current_working_state.mdc#mcp-hub-server-status
- **Hub Components**: See @project_overview.mdc#mcp-hub-server-components
description: "MCP Hub Server - Consolidated tool gateway providing access to all 63 tools via 15 meta-tools, avoiding Cursor's 40-tool limit"
globs: ["**/*.py", "**/mcp_servers/**/*", "**/.cursor/mcp.json", "**/config/tool_registry.json"]
alwaysApply: true
---
